# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 9a995a851203a44d5b9d9986c5b1d6884af1e9746fc84fe1888bcd70c3eaf45f
file:
- statement:
    create_materialized_view_statement:
    - keyword: CREATE
    - keyword: MATERIALIZED
    - keyword: VIEW
    - table_reference:
      - naked_identifier: mydataset
      - dot: .
      - naked_identifier: my_mv
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                - naked_identifier: anotherdataset
                - dot: .
                - naked_identifier: mv_base_table
- statement_terminator: ;
- statement:
    create_materialized_view_statement:
    - keyword: CREATE
    - keyword: MATERIALIZED
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
      - naked_identifier: mydataset
      - dot: .
      - naked_identifier: my_mv
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                - naked_identifier: anotherdataset
                - dot: .
                - naked_identifier: mv_base_table
- statement_terminator: ;
- statement:
    create_materialized_view_statement:
    - keyword: CREATE
    - keyword: MATERIALIZED
    - keyword: VIEW
    - table_reference:
      - naked_identifier: mydataset
      - dot: .
      - naked_identifier: my_mv
    - options_segment:
        keyword: OPTIONS
        bracketed:
          start_bracket: (
          parameter: friendly_name
          comparison_operator:
            raw_comparison_operator: '='
          quoted_literal: '"my_mv"'
          end_bracket: )
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                - naked_identifier: anotherdataset
                - dot: .
                - naked_identifier: mv_base_table
- statement_terminator: ;
- statement:
    create_materialized_view_statement:
    - keyword: CREATE
    - keyword: MATERIALIZED
    - keyword: VIEW
    - table_reference:
      - naked_identifier: mydataset
      - dot: .
      - naked_identifier: my_mv
    - partition_by_segment:
      - keyword: PARTITION
      - keyword: BY
      - expression:
          function:
            function_name:
              function_name_identifier: DATE
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: x
                end_bracket: )
    - cluster_by_segment:
      - keyword: CLUSTER
      - keyword: BY
      - expression:
          column_reference:
            naked_identifier: y
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: x
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: y
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                - naked_identifier: anotherdataset
                - dot: .
                - naked_identifier: mv_base_table
- statement_terminator: ;
