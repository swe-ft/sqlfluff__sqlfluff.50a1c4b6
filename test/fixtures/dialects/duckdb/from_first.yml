# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 9aab7451d76baf3e5132c047e1cd4c8fee339695fdfc28e3f4624e040bb24c1c
file:
- statement:
    select_statement:
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: table_name
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
- statement_terminator: ;
- statement:
    select_statement:
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: table_name
- statement_terminator: ;
- statement:
    select_statement:
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: range
                function_contents:
                  bracketed:
                    start_bracket: (
                    expression:
                      numeric_literal: '100'
                    end_bracket: )
            alias_expression:
              keyword: AS
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                  naked_identifier: i
                end_bracket: )
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: sum
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                  - naked_identifier: t
                  - dot: .
                  - naked_identifier: i
                end_bracket: )
      where_clause:
        keyword: WHERE
        expression:
        - column_reference:
          - naked_identifier: t
          - dot: .
          - naked_identifier: i
        - binary_operator: '%'
        - numeric_literal: '2'
        - comparison_operator:
            raw_comparison_operator: '='
        - numeric_literal: '0'
- statement_terminator: ;
