# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 819548e097fc750b37e657682d090047d51f01a458161bb97c18b26796a51181
file:
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: t1
    - bracketed:
      - start_bracket: (
      - table_constraint:
          keyword: CHECK
          bracketed:
            start_bracket: (
            expression:
            - column_reference:
                naked_identifier: c1
            - comparison_operator:
              - raw_comparison_operator: <
              - raw_comparison_operator: '>'
            - column_reference:
                naked_identifier: c2
            end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: c1
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  naked_identifier: c1
                comparison_operator:
                  raw_comparison_operator: '>'
                numeric_literal: '10'
              end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: c2
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
          - keyword: CONSTRAINT
          - object_reference:
              naked_identifier: c2_positive
          - keyword: CHECK
          - bracketed:
              start_bracket: (
              expression:
                column_reference:
                  naked_identifier: c2
                comparison_operator:
                  raw_comparison_operator: '>'
                numeric_literal: '0'
              end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: c3
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  naked_identifier: c3
                comparison_operator:
                  raw_comparison_operator: <
                numeric_literal: '100'
              end_bracket: )
      - comma: ','
      - table_constraint:
        - keyword: CONSTRAINT
        - object_reference:
            naked_identifier: c1_nonzero
        - keyword: CHECK
        - bracketed:
            start_bracket: (
            expression:
              column_reference:
                naked_identifier: c1
              comparison_operator:
              - raw_comparison_operator: <
              - raw_comparison_operator: '>'
              numeric_literal: '0'
            end_bracket: )
      - comma: ','
      - table_constraint:
          keyword: CHECK
          bracketed:
            start_bracket: (
            expression:
            - column_reference:
                naked_identifier: c1
            - comparison_operator:
                raw_comparison_operator: '>'
            - column_reference:
                naked_identifier: c3
            end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    alter_table_statement:
    - keyword: ALTER
    - keyword: TABLE
    - table_reference:
        naked_identifier: t1
    - keyword: ALTER
    - keyword: CHECK
    - object_reference:
        naked_identifier: c2_positive
    - keyword: NOT
    - keyword: ENFORCED
- statement_terminator: ;
- statement:
    alter_table_statement:
    - keyword: ALTER
    - keyword: TABLE
    - table_reference:
        naked_identifier: t1
    - keyword: DROP
    - keyword: CONSTRAINT
    - object_reference:
        naked_identifier: c1_nonzero
- statement_terminator: ;
